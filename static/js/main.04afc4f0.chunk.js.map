{"version":3,"sources":["Button.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","variant","size","color","props","theme","useThemeUI","sx","mapObject","dotProp","get","key","value","toString","includes","replace","deep","sizeSx","appearance","display","textAlign","lineHeight","textDecoration","fontSize","border","borderRadius","fonts","body","raised","fontWeights","light","regular","semiBold","bold","sizes","4","5","6","7","8","9","borders","transparent","fontSizes","xxs","xs","s","m","l","xl","xxl","xxxl","xxxxl","colors","text","background","primary","primary_disabled","primary_focus","primary_active","secondary","secondary_disabled","secondary_focus","secondary_active","neutral","neutral_disabled","neutral_focus","neutral_active","buttons","px","py","fill","cursor","borderColor","bg","outline","minimal","variants","StyleguidePage","p","map","textTransform","my","ml","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04afc4f0.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport dotProp from 'dot-prop'\nimport mapObject from 'map-obj'\nimport { jsx, SxStyleProp, useThemeUI } from '@theme-ui/core'\n\ntype HtmlButtonProps = JSX.IntrinsicElements['button']\n\nexport interface ButtonProps extends HtmlButtonProps {\n  variant?: string\n  size?: 's' | 'm' | 'l'\n  color?: string\n}\n\nconst colorKey = '__color'\n\nexport function Button({\n  variant = 'fill',\n  size = 'm',\n  color = 'primary',\n  ...props\n}: ButtonProps) {\n  const { theme } = useThemeUI()\n  const sx: SxStyleProp = mapObject(\n    dotProp.get(theme || {}, `buttons.${variant}`, {}),\n    (key: string, value: string) => [\n      key?.toString(),\n      ['bg', 'color', 'borderColor'].includes(key)\n        ? value?.replace(colorKey, color)\n        : value,\n    ],\n    { deep: true },\n  )\n  const sizeSx = dotProp.get(theme || {}, `buttons.sizes.${size}`, {})\n  return (\n    <button\n      {...props}\n      sx={{\n        appearance: 'none',\n        display: 'inline-block',\n        textAlign: 'center',\n        lineHeight: 'inherit',\n        textDecoration: 'none',\n        fontSize: 'inherit',\n        border: 0,\n        borderRadius: 4,\n        ...sx,\n        ...sizeSx,\n      }}\n    />\n  )\n}\n","import { Theme } from \"@theme-ui/css\";\n\nexport const colors = {\n  text: \"#333\",\n  background: \"#fefeff\",\n  primary: \"hsl(208,80%,40%)\",\n  primary_disabled: \"hsl(208, 31%, 50%)\",\n  primary_focus: \"hsl(208,80%,25%,1)\",\n  primary_active: \"hsl(208,80%,20%,1)\",\n  secondary: \"hsl(20,80%,40%)\",\n  secondary_disabled: \"hsl(20, 31%, 50%)\",\n  secondary_focus: \"hsl(20,80%,25%,1)\",\n  secondary_active: \"hsl(20,80%,20%,1)\",\n  neutral: \"hsl(0,0%,40%,1)\",\n  neutral_disabled: \"hsl(0,0%,60%,1)\",\n  neutral_focus: \"hsl(0,0%,30%,1)\",\n  neutral_active: \"hsl(0,0%,20%,1)\"\n};\n\nexport const theme: Theme = {\n  fonts: {\n    body: \"Open Sans, sans-serif\",\n    raised: \"Oswald, sans-serif;\"\n  },\n  fontWeights: {\n    light: 300,\n    regular: 400,\n    semiBold: 600,\n    bold: 700\n  },\n  sizes: {\n    4: \"24rem\",\n    5: \"32rem\",\n    6: \"56rem\",\n    7: \"64rem\",\n    8: \"72rem\",\n    9: \"80rem\"\n  },\n  borders: {\n    light: \"1px solid\",\n    transparent: \"1px solid transparent\"\n  },\n  fontSizes: {\n    xxs: \"0.5rem\",\n    xs: \"0.725rem\",\n    s: \"0.875rem\",\n    m: \"1rem\",\n    l: \"1.25rem\",\n    xl: \"1.5rem\",\n    xxl: \"2rem\",\n    xxxl: \"3rem\",\n    xxxxl: \"4rem\"\n  },\n  colors,\n  buttons: {\n    sizes: {\n      s: {\n        fontSize: \"s\",\n        px: 2,\n        py: 1\n      },\n      m: {\n        fontSize: \"m\",\n        px: 3,\n        py: 2\n      },\n      l: {\n        fontSize: \"xl\",\n        px: 3,\n        py: 2\n      }\n    },\n    fill: {\n      cursor: \"pointer\",\n      color: \"background\",\n      border: \"light\",\n      borderColor: \"__color\",\n      bg: \"__color\",\n      \"&:hover,&:focus\": {\n        bg: \"__color_focus\",\n        border: \"light\",\n        borderColor: \"__color_focus\"\n      },\n      \"&:active\": {\n        bg: \"__color_active\",\n        borderColor: \"__color_active\"\n      },\n      \"&:disabled\": {\n        bg: \"__color_disabled\",\n        borderColor: \"__color_disabled\",\n        cursor: \"not-allowed\"\n      }\n    },\n    outline: {\n      border: \"light\",\n      borderColor: \"__color\",\n      color: \"__color\",\n      cursor: \"pointer\",\n      bg: \"background\",\n      \"&:hover,&:focus\": {\n        color: \"__color_focus\",\n        borderColor: \"__color_focus\"\n      },\n      \"&:active\": {\n        color: \"__color_active\",\n        borderColor: \"__color_active\"\n      },\n      \"&:disabled\": {\n        cursor: \"not-allowed\"\n      }\n    },\n    minimal: {\n      border: \"transparent\",\n      color: \"__color\",\n      cursor: \"pointer\",\n      bg: \"background\",\n      \"&:hover,&:focus\": {\n        color: \"__color_focus\"\n      },\n      \"&:active\": {\n        color: \"__color_active\"\n      },\n      \"&:disabled\": {\n        cursor: \"not-allowed\"\n      }\n    }\n  }\n};\n","/** @jsx jsx */\n\nimport { jsx, ThemeProvider } from '@theme-ui/core'\n\nimport { Button } from './Button'\nimport { theme } from './theme'\n\nconst colors = ['primary', 'secondary', 'neutral']\nconst variants = ['fill', 'outline', 'minimal']\n\nexport default function StyleguidePage() {\n  return (\n    <ThemeProvider theme={theme}>\n      <div sx={{ p: 3 }}>\n        {colors.map(color => (\n          <div key={color}>\n            <h2 sx={{ textTransform: 'uppercase', color }}>{color}</h2>\n            {variants.map(variant => (\n              <div key={variant} sx={{ my: 2 }}>\n                <Button color={color} variant={variant} size=\"l\">\n                  {color} {variant}\n                </Button>\n                <Button color={color} variant={variant} size=\"m\" sx={{ ml: 2 }}>\n                  {color} {variant}\n                </Button>\n                <Button color={color} variant={variant} size=\"s\" sx={{ ml: 2 }}>\n                  {color} {variant}\n                </Button>\n                <Button color={color} variant={variant} size=\"s\" disabled sx={{ ml: 2 }}>\n                  {color} {variant} disabled\n                </Button>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </ThemeProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}